//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/InputDetector.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputDetector : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputDetector()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputDetector"",
    ""maps"": [
        {
            ""name"": ""SpidyActionMap"",
            ""id"": ""891f6ace-caf2-4b7e-8a5e-d79d41c18ed2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""286ad8a4-f5f8-43ea-9f1a-3af1ae10ede6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Firing"",
                    ""type"": ""Button"",
                    ""id"": ""3a13ec13-a758-4671-b4a7-c309edebdf57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropCivilian"",
                    ""type"": ""Button"",
                    ""id"": ""7b4305f7-30c2-4a98-9576-1e523893a2f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""b0511355-d17f-47aa-a6d1-333e896f40fe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6a6410d5-1124-4f95-9ecc-5bbf9a9dcccc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c8225f47-2cee-449f-933d-864087fc96f8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3729e109-5ba2-492d-8ea8-7e5d504969d7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fe205a42-cfa0-41d7-95b6-f868d922dc3a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""63a7f5d7-4fa9-4a23-a0a8-02bde371c209"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""31d11f72-e991-4fbe-9d9d-6a22cbc3b807"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4d85b0a5-abfc-4cf5-ab30-8f5fa692940f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7a8fe00a-2d48-4b43-b9aa-7e1c33507f76"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2dac9e2a-171f-4f58-afc7-d825e007a726"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""B/M Keys"",
                    ""id"": ""5db0725f-b393-415f-b62a-d0694bfb32e1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Firing"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fc942c80-9e6f-45ee-9374-c6497ba387c8"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Firing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""406be63e-188b-491f-9559-3dff3fbdcb50"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Firing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""00f3960b-6fdd-4d20-8a0b-251702609c15"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""DropCivilian"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8922d9ff-52c0-44a5-bf2f-eb6e0144c86b"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""DropCivilian"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InGameActionMap"",
            ""id"": ""93a54f61-af9a-47b6-bd19-549c7a936637"",
            ""actions"": [
                {
                    ""name"": ""GamePause"",
                    ""type"": ""Button"",
                    ""id"": ""51d8f7af-f81f-41c3-8e73-0d70801622a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce1e5a89-c944-4cbf-8f45-7b2ede7753f2"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""GamePause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InstructionsScreenActionMap"",
            ""id"": ""94c3a300-025b-4c0b-9bfc-a0c30f582664"",
            ""actions"": [
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""eb9e8dd4-4f9b-486d-aedc-6003331869a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""d1c8b1e7-7c32-4c61-b0b5-a7e79889d141"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1dea670-9d42-4348-8f3f-0abeaebfcb47"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8484f43-15dc-4831-8281-3bb48a0edbe8"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GeneralScheme"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DeathScreenActionMap"",
            ""id"": ""1c0c831f-5eb0-4133-9730-03481492d800"",
            ""actions"": [
                {
                    ""name"": ""Play Again"",
                    ""type"": ""Button"",
                    ""id"": ""5947428c-ccf4-4159-8f09-50c3e0cd15fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""f3809c2d-1ef7-45ca-97a6-01bce3d136fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""908d09c3-3ea9-465c-8072-201ab2148d3e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play Again"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e22c44a-592c-48a7-8acd-7e75a0bc3e24"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""GeneralScheme"",
            ""bindingGroup"": ""GeneralScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SpidyActionMap
        m_SpidyActionMap = asset.FindActionMap("SpidyActionMap", throwIfNotFound: true);
        m_SpidyActionMap_Movement = m_SpidyActionMap.FindAction("Movement", throwIfNotFound: true);
        m_SpidyActionMap_Firing = m_SpidyActionMap.FindAction("Firing", throwIfNotFound: true);
        m_SpidyActionMap_DropCivilian = m_SpidyActionMap.FindAction("DropCivilian", throwIfNotFound: true);
        // InGameActionMap
        m_InGameActionMap = asset.FindActionMap("InGameActionMap", throwIfNotFound: true);
        m_InGameActionMap_GamePause = m_InGameActionMap.FindAction("GamePause", throwIfNotFound: true);
        // InstructionsScreenActionMap
        m_InstructionsScreenActionMap = asset.FindActionMap("InstructionsScreenActionMap", throwIfNotFound: true);
        m_InstructionsScreenActionMap_Play = m_InstructionsScreenActionMap.FindAction("Play", throwIfNotFound: true);
        m_InstructionsScreenActionMap_Quit = m_InstructionsScreenActionMap.FindAction("Quit", throwIfNotFound: true);
        // DeathScreenActionMap
        m_DeathScreenActionMap = asset.FindActionMap("DeathScreenActionMap", throwIfNotFound: true);
        m_DeathScreenActionMap_PlayAgain = m_DeathScreenActionMap.FindAction("Play Again", throwIfNotFound: true);
        m_DeathScreenActionMap_Exit = m_DeathScreenActionMap.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpidyActionMap
    private readonly InputActionMap m_SpidyActionMap;
    private ISpidyActionMapActions m_SpidyActionMapActionsCallbackInterface;
    private readonly InputAction m_SpidyActionMap_Movement;
    private readonly InputAction m_SpidyActionMap_Firing;
    private readonly InputAction m_SpidyActionMap_DropCivilian;
    public struct SpidyActionMapActions
    {
        private @InputDetector m_Wrapper;
        public SpidyActionMapActions(@InputDetector wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_SpidyActionMap_Movement;
        public InputAction @Firing => m_Wrapper.m_SpidyActionMap_Firing;
        public InputAction @DropCivilian => m_Wrapper.m_SpidyActionMap_DropCivilian;
        public InputActionMap Get() { return m_Wrapper.m_SpidyActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpidyActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ISpidyActionMapActions instance)
        {
            if (m_Wrapper.m_SpidyActionMapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_SpidyActionMapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_SpidyActionMapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_SpidyActionMapActionsCallbackInterface.OnMovement;
                @Firing.started -= m_Wrapper.m_SpidyActionMapActionsCallbackInterface.OnFiring;
                @Firing.performed -= m_Wrapper.m_SpidyActionMapActionsCallbackInterface.OnFiring;
                @Firing.canceled -= m_Wrapper.m_SpidyActionMapActionsCallbackInterface.OnFiring;
                @DropCivilian.started -= m_Wrapper.m_SpidyActionMapActionsCallbackInterface.OnDropCivilian;
                @DropCivilian.performed -= m_Wrapper.m_SpidyActionMapActionsCallbackInterface.OnDropCivilian;
                @DropCivilian.canceled -= m_Wrapper.m_SpidyActionMapActionsCallbackInterface.OnDropCivilian;
            }
            m_Wrapper.m_SpidyActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Firing.started += instance.OnFiring;
                @Firing.performed += instance.OnFiring;
                @Firing.canceled += instance.OnFiring;
                @DropCivilian.started += instance.OnDropCivilian;
                @DropCivilian.performed += instance.OnDropCivilian;
                @DropCivilian.canceled += instance.OnDropCivilian;
            }
        }
    }
    public SpidyActionMapActions @SpidyActionMap => new SpidyActionMapActions(this);

    // InGameActionMap
    private readonly InputActionMap m_InGameActionMap;
    private IInGameActionMapActions m_InGameActionMapActionsCallbackInterface;
    private readonly InputAction m_InGameActionMap_GamePause;
    public struct InGameActionMapActions
    {
        private @InputDetector m_Wrapper;
        public InGameActionMapActions(@InputDetector wrapper) { m_Wrapper = wrapper; }
        public InputAction @GamePause => m_Wrapper.m_InGameActionMap_GamePause;
        public InputActionMap Get() { return m_Wrapper.m_InGameActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IInGameActionMapActions instance)
        {
            if (m_Wrapper.m_InGameActionMapActionsCallbackInterface != null)
            {
                @GamePause.started -= m_Wrapper.m_InGameActionMapActionsCallbackInterface.OnGamePause;
                @GamePause.performed -= m_Wrapper.m_InGameActionMapActionsCallbackInterface.OnGamePause;
                @GamePause.canceled -= m_Wrapper.m_InGameActionMapActionsCallbackInterface.OnGamePause;
            }
            m_Wrapper.m_InGameActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GamePause.started += instance.OnGamePause;
                @GamePause.performed += instance.OnGamePause;
                @GamePause.canceled += instance.OnGamePause;
            }
        }
    }
    public InGameActionMapActions @InGameActionMap => new InGameActionMapActions(this);

    // InstructionsScreenActionMap
    private readonly InputActionMap m_InstructionsScreenActionMap;
    private IInstructionsScreenActionMapActions m_InstructionsScreenActionMapActionsCallbackInterface;
    private readonly InputAction m_InstructionsScreenActionMap_Play;
    private readonly InputAction m_InstructionsScreenActionMap_Quit;
    public struct InstructionsScreenActionMapActions
    {
        private @InputDetector m_Wrapper;
        public InstructionsScreenActionMapActions(@InputDetector wrapper) { m_Wrapper = wrapper; }
        public InputAction @Play => m_Wrapper.m_InstructionsScreenActionMap_Play;
        public InputAction @Quit => m_Wrapper.m_InstructionsScreenActionMap_Quit;
        public InputActionMap Get() { return m_Wrapper.m_InstructionsScreenActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InstructionsScreenActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IInstructionsScreenActionMapActions instance)
        {
            if (m_Wrapper.m_InstructionsScreenActionMapActionsCallbackInterface != null)
            {
                @Play.started -= m_Wrapper.m_InstructionsScreenActionMapActionsCallbackInterface.OnPlay;
                @Play.performed -= m_Wrapper.m_InstructionsScreenActionMapActionsCallbackInterface.OnPlay;
                @Play.canceled -= m_Wrapper.m_InstructionsScreenActionMapActionsCallbackInterface.OnPlay;
                @Quit.started -= m_Wrapper.m_InstructionsScreenActionMapActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_InstructionsScreenActionMapActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_InstructionsScreenActionMapActionsCallbackInterface.OnQuit;
            }
            m_Wrapper.m_InstructionsScreenActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Play.started += instance.OnPlay;
                @Play.performed += instance.OnPlay;
                @Play.canceled += instance.OnPlay;
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
            }
        }
    }
    public InstructionsScreenActionMapActions @InstructionsScreenActionMap => new InstructionsScreenActionMapActions(this);

    // DeathScreenActionMap
    private readonly InputActionMap m_DeathScreenActionMap;
    private IDeathScreenActionMapActions m_DeathScreenActionMapActionsCallbackInterface;
    private readonly InputAction m_DeathScreenActionMap_PlayAgain;
    private readonly InputAction m_DeathScreenActionMap_Exit;
    public struct DeathScreenActionMapActions
    {
        private @InputDetector m_Wrapper;
        public DeathScreenActionMapActions(@InputDetector wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayAgain => m_Wrapper.m_DeathScreenActionMap_PlayAgain;
        public InputAction @Exit => m_Wrapper.m_DeathScreenActionMap_Exit;
        public InputActionMap Get() { return m_Wrapper.m_DeathScreenActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeathScreenActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IDeathScreenActionMapActions instance)
        {
            if (m_Wrapper.m_DeathScreenActionMapActionsCallbackInterface != null)
            {
                @PlayAgain.started -= m_Wrapper.m_DeathScreenActionMapActionsCallbackInterface.OnPlayAgain;
                @PlayAgain.performed -= m_Wrapper.m_DeathScreenActionMapActionsCallbackInterface.OnPlayAgain;
                @PlayAgain.canceled -= m_Wrapper.m_DeathScreenActionMapActionsCallbackInterface.OnPlayAgain;
                @Exit.started -= m_Wrapper.m_DeathScreenActionMapActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_DeathScreenActionMapActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_DeathScreenActionMapActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_DeathScreenActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayAgain.started += instance.OnPlayAgain;
                @PlayAgain.performed += instance.OnPlayAgain;
                @PlayAgain.canceled += instance.OnPlayAgain;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public DeathScreenActionMapActions @DeathScreenActionMap => new DeathScreenActionMapActions(this);
    private int m_GeneralSchemeSchemeIndex = -1;
    public InputControlScheme GeneralSchemeScheme
    {
        get
        {
            if (m_GeneralSchemeSchemeIndex == -1) m_GeneralSchemeSchemeIndex = asset.FindControlSchemeIndex("GeneralScheme");
            return asset.controlSchemes[m_GeneralSchemeSchemeIndex];
        }
    }
    public interface ISpidyActionMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnFiring(InputAction.CallbackContext context);
        void OnDropCivilian(InputAction.CallbackContext context);
    }
    public interface IInGameActionMapActions
    {
        void OnGamePause(InputAction.CallbackContext context);
    }
    public interface IInstructionsScreenActionMapActions
    {
        void OnPlay(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
    }
    public interface IDeathScreenActionMapActions
    {
        void OnPlayAgain(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
